---
- name: Deploy, configure, and populate Postgres 10
  hosts: application_servers
  become: true
  gather_facts: false
  tags:
    - application_servers
  vars:
		flask_app_name: resource_hub
    flask_user: flask
    flask_home: /opt/
    flask_repo: https://github.com/tonykay/resource_hub.git  
    flask_scm_ref: main  

    flask_packages:
      - python3
    postgres_users:
      - name: flask
        password: redhat
        database: flask_db
        state: present
        priv: ALL

  tasks:

    - name: Install flask packages
      package:
        name: "{{ __package }}"
        state: present
      loop: "{{ flask_packages }}"        
      loop_control:
        loop_var: __package

		- name: "Install flask repo {{ flask_repo }}"
			git:
				repo: "{{ flask_repo }}"
				dest: "{{ flask_home }}"
				update: yes 

		- name: install modules in a virtualenv
			pip:
				requirements: "{{ flask_home }}/{{ flask_app_name }}/requirements.txt
				virtualenv: "{{ /home/{{ ansible_ssh_user }}/{{ app_name }}/env
					virtualenv_python: python3.5

    - name: Check if Postgres initialized
      stat:
        path: "{{ postgres_10_data_dir }}/PG_VERSION"
      register: r_postgres_init_dir_state

    - when: not r_postgres_init_dir_state.stat.exists
      name: Run Postgres initdb to initialize if postgres not initialized
      command: "{{ postgres_10_bin_path }}/postgresql-10-setup initdb"
      notify: restart_postgres

    - name: Setup Postgres for remote password auth
      template:
        src: pg_hba.conf.j2
        dest: "{{ postgres_10_data_dir }}/pg_hba.conf"
      notify: restart_postgres

    - name: Setup Postgres to listen on network interfaces
      lineinfile:
        dest: "{{ postgres_10_data_dir }}/postgresql.conf"
        line: "listen_addresses = '*'"
        insertafter: "#listen_addresses"
      notify: restart_postgres

    - name: Setup Postgres as started and enabled on boot.
      service:
        name: "{{ postgres_service }}"
        state: "{{ postgres_service_state | default('started') }}"
        enabled: "{{ postgres_service_enabled | default(true) }}"

    - name: Configure Postgres resources, user, database etc 
      block:

        - name: Setup Postgres database(s) 
          postgresql_db:
            name: "{{ __database.name }}"
            state: "{{ __database.state | default('present') }}"
          loop: "{{ postgres_databases }}"
          loop_control:
            loop_var: __database

        - name: Create Postgres user#(s) 
          postgresql_user:
            name: "{{ __user.name }}"
            password: "{{ __user.password | default(omit) }}"
            encrypted: true # "{{ __user.encrypted | default(omit) }}"
            priv: "{{ __user.priv | default(omit) }}"
            db: "{{ __user.database | default(omit) }}"
            # role_attr_flags: "{{ __user.role_attr_flags | default(omit) }}"
            state: "{{ __user.state | default('present') }}"
          loop: "{{ postgres_users }}"
          loop_control:
            loop_var: __user
          no_log: "{{ postgres_user_no_log_state | default(false) }}" 


      become_user: "{{ postgres_user }}"

  handlers:

    - name: restart_postgres
      service:
        name: "{{ postgres_service }}"
        state: restarted


- name: Deploy Application Tier
  hosts: app_servers
  gather_facts: false
  become: true
  vars:
    postgres_rhel7_repo: "https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    app_server_packages:
      - python-psycopg2
    app_server_port: 8080    
    app_server_service: tomcat

  tags:
    - app_servers

  tasks:

    - name: Install Tomcat package(s)
      package:
        name: "{{ app_server_packages }}"
        state: present

    - name: Enable Tomcat at boot
      service:
        name: tomcat
        enabled: yes

    - name: Create Tomcat content directory
      file:
        path: /usr/share/tomcat/webapps/ROOT
        state: directory

    - name: Copy static index.html to tomcat webapps/ansible/index.html
      template:
        src: index.html.j2
        dest: /usr/share/tomcat/webapps/ROOT/index.html
        mode: 0644

    - name: Start Tomcat
      service:
        name: "{{ app_server_service }}"
        state: started


- name: Deploy haproxy load balancer
  hosts: load_balancers
  gather_facts: false 
  become: true

  vars:
    load_balancer_packages:
      - haproxy

  tags:
    - load_balancers

  tasks:

    - name: Install load balancer packages
      package:
        name: "{{ load_balancer_packages }}"
        state: present

    - name: Configure haproxy load balancing
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: restart_haproxy

    - name: Enable Haproxy
      service:
        name: haproxy
        state: started
        enabled: true

  handlers:

    - name: restart_haproxy
      service:
        name: haproxy
        state: restarted

- name: End to end smoke tests
  hosts: app_servers:database_servers
  gather_facts: true
  become: true
  tags:
    - smoketest  

  tasks:

    - debug:
        msg: 
          - "IP is {{ hostvars['appdb1']['ansible_default_ipv4']['address'] }}"
          - "First App server  {{ groups.app_servers[0] }}" 
        verbosity: 2        

    - name: Smoketest Postgres database
      postgresql_ping:
        db: flask_db
        login_host: "{{ hostvars['appdb1']['ansible_default_ipv4']['address'] }}"
        login_user: flask
        login_password: redhat
        ssl_mode: disable
      delegate_to: "{{ groups.app_servers[0] }}"
      run_once: true
      tags:
        - smoketest

- name: End to end smoke tests
  hosts: app_servers
  become: false
  gather_facts: false
  tags:
    - smoketest  
  tasks:
 
    - name: Check webserver for correct response
      uri:
        url: "http://frontend1.{{ GUID }}.example.opentlc.com"
        return_content: yes
      until: '"Welcome to Tomcat" in result.content'
      retries: 10
      delay: 1
      register: result
      delegate_to: localhost

...
